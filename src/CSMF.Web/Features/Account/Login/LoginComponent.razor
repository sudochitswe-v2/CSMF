@page "/Account/Login"
@layout EmptyLayout

@using CSMF.Web.Features.Account.Login.Models
@using Microsoft.AspNetCore.Authentication
@using Mapster
@inject IMediator Mediator


<div Style="display: flex; justify-content: center; align-items: center; margin-top: 40px">
    <FluentCard Style="width: 400px; padding: 40px">
        <div style="margin-bottom: 20px; text-align: center;">
            <img src="static/img/csmf_logo.png" alt="App Logo" height="120px"/>
        </div>
        <div style="display:  flex; flex-direction: column;gap: 15px">
            <EditForm Model="@Model" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <FluentTextField
                    TextFieldType="TextFieldType.Email"
                    @bind-Value="Model.Email"
                    Label="Email"
                    Style="width: 100%"/>

                <FluentTextField
                    TextFieldType="TextFieldType.Password"
                    @bind-Value="Model.Password"
                    Label="Password"
                    Style="width: 100%"/>

                <FluentButton
                    Type="ButtonType.Submit"
                    Appearance="Appearance.Accent"
                    Style="width: 100%; height: 40px">
                    Login
                </FluentButton>
            </EditForm>
        </div>
    </FluentCard>
</div>

@code{

    [CascadingParameter]
    public HttpContext? httpContext { get; set; } 
    
    private LoginViewModel Model = new ();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var query = this.Model.Adapt<LoginUseCase.Query>();
        
        var response =   await Mediator.Send(query);
        if (response.IsSuccess)
            await httpContext.SignInAsync(response.Value.Token);
        else
            errorMessage = response.Error.Message;

    }

}