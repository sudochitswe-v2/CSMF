// <auto-generated />
using System;
using CSMF.WebMvc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CSMF.WebMvc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618195002_DocsTableChanges")]
    partial class DocsTableChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.BranchUsers.BranchUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branch_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<string>("SystemUserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("system_user_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_branch_users");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("ix_branch_users_branch_id");

                    b.HasIndex("SystemUserId")
                        .HasDatabaseName("ix_branch_users_system_user_id");

                    b.ToTable("branch_users", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Branches.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phones");

                    b.HasKey("Id")
                        .HasName("pk_branches");

                    b.ToTable("branches", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branch_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("identification_number");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("ix_customers_branch_id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content_type");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("document_type");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("extension");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_documents_customer_id");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.LoanApplications.LoanApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("int")
                        .HasColumnName("duration_months");

                    b.Property<string>("DurationPeriod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("duration_period");

                    b.Property<string>("InterestCycle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("interest_cycle");

                    b.Property<string>("InterestMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("interest_method");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("interest_rate");

                    b.Property<string>("LoanNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("loan_number");

                    b.Property<int>("LoanProductId")
                        .HasColumnType("int")
                        .HasColumnName("loan_product_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("principal_amount");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("release_date");

                    b.Property<string>("RepaymentCycle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("repayment_cycle");

                    b.Property<int>("RepaymentDay")
                        .HasColumnType("int")
                        .HasColumnName("repayment_day");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalFees")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_fees");

                    b.Property<decimal>("TotalInterest")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_interest");

                    b.Property<decimal>("TotalRepayment")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_repayment");

                    b.HasKey("Id")
                        .HasName("pk_loan_applications");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_loan_applications_customer_id");

                    b.HasIndex("LoanProductId")
                        .HasDatabaseName("ix_loan_applications_loan_product_id");

                    b.ToTable("loan_applications", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.LoanFees.LoanFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CalculatedAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("calculated_amount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<decimal?>("FeeAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("fee_amount");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fee_name");

                    b.Property<decimal?>("FeePercentage")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("fee_percentage");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fee_type");

                    b.Property<int>("LoanApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("loan_application_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.HasKey("Id")
                        .HasName("pk_loan_fees");

                    b.HasIndex("LoanApplicationId")
                        .HasDatabaseName("ix_loan_fees_loan_application_id");

                    b.ToTable("loan_fees", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.LoanProducts.LoanProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("int")
                        .HasColumnName("duration_months");

                    b.Property<string>("DurationPeriod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("duration_period");

                    b.Property<string>("DurationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("duration_type");

                    b.Property<int>("GracePeriodDays")
                        .HasColumnType("int")
                        .HasColumnName("grace_period_days");

                    b.Property<string>("InterestCycle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("interest_cycle");

                    b.Property<string>("InterestMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("interest_method");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("interest_rate");

                    b.Property<bool>("LatePenaltyEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("late_penalty_enabled");

                    b.Property<decimal>("MaxPrincipalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("max_principal_amount");

                    b.Property<decimal>("MinPrincipalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("min_principal_amount");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<string>("PenaltyCalculationBase")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("penalty_calculation_base");

                    b.Property<decimal?>("PenaltyFixedAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("penalty_fixed_amount");

                    b.Property<decimal?>("PenaltyPercentage")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("penalty_percentage");

                    b.Property<string>("PenaltyType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("penalty_type");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("product_title");

                    b.Property<string>("RecurringPenaltyType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("recurring_penalty_type");

                    b.Property<string>("RepaymentCycle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("repayment_cycle");

                    b.HasKey("Id")
                        .HasName("pk_loan_products");

                    b.ToTable("loan_products", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.PenaltyTransactions.PenaltyTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<int>("DaysOverdue")
                        .HasColumnType("int")
                        .HasColumnName("days_overdue");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("LoanApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("loan_application_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<decimal>("PenaltyAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("penalty_amount");

                    b.Property<DateTime>("PenaltyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("penalty_date");

                    b.Property<string>("PenaltyType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("penalty_type");

                    b.Property<int>("RepaymentScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("repayment_schedule_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_penalty_transaction");

                    b.HasIndex("LoanApplicationId")
                        .HasDatabaseName("ix_penalty_transaction_loan_application_id");

                    b.HasIndex("RepaymentScheduleId")
                        .HasDatabaseName("ix_penalty_transaction_repayment_schedule_id");

                    b.ToTable("penalty_transaction", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.RepaymentSchedules.RepaymentSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("fee_amount");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("int")
                        .HasColumnName("installment_number");

                    b.Property<decimal>("InterestAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("interest_amount");

                    b.Property<int>("LoanApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("loan_application_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<decimal>("OutstandingPrincipal")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("outstanding_principal");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("principal_amount");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("pk_repayment_schedules");

                    b.HasIndex("LoanApplicationId")
                        .HasDatabaseName("ix_repayment_schedules_loan_application_id");

                    b.ToTable("repayment_schedules", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.RepaymentTransactions.RepaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount_paid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<decimal>("FeePaid")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("fee_paid");

                    b.Property<decimal>("InterestPaid")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("interest_paid");

                    b.Property<int>("LoanApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("loan_application_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_on");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("payment_method");

                    b.Property<decimal>("PenaltyPaid")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("penalty_paid");

                    b.Property<decimal>("PrincipalPaid")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("principal_paid");

                    b.Property<int>("RepaymentScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("repayment_schedule_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_repayment_transaction");

                    b.HasIndex("LoanApplicationId")
                        .HasDatabaseName("ix_repayment_transaction_loan_application_id");

                    b.HasIndex("RepaymentScheduleId")
                        .HasDatabaseName("ix_repayment_transaction_repayment_schedule_id");

                    b.ToTable("repayment_transaction", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Users.SystemUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_name");

                    b.Property<string>("SystemUserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("system_user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("SystemUserId")
                        .HasDatabaseName("ix_asp_net_roles_system_user_id");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.BranchUsers.BranchUser", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.Branches.Branch", "Branch")
                        .WithMany("BranchUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_branch_users_branches_branch_id");

                    b.HasOne("CSMF.WebMvc.Domain.Entities.Users.SystemUser", "SystemUser")
                        .WithMany("BranchUsers")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("fk_branch_users_users_system_user_id");

                    b.Navigation("Branch");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Customers.Customer", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.Branches.Branch", "Branch")
                        .WithMany("Customers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customers_branches_branch_id");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Documents.Document", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.LoanApplications.LoanApplication", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("LoanApplications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loan_applications_customers_customer_id");

                    b.HasOne("CSMF.WebMvc.Domain.Entities.LoanProducts.LoanProduct", "LoanProduct")
                        .WithMany("LoanApplications")
                        .HasForeignKey("LoanProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loan_applications_loan_products_loan_product_id");

                    b.Navigation("Customer");

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.LoanFees.LoanFee", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.LoanApplications.LoanApplication", "LoanApplication")
                        .WithMany("LoanFees")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loan_fees_loan_applications_loan_application_id");

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.PenaltyTransactions.PenaltyTransaction", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.LoanApplications.LoanApplication", "LoanApplication")
                        .WithMany("PenaltyTransactions")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_penalty_transaction_loan_applications_loan_application_id");

                    b.HasOne("CSMF.WebMvc.Domain.Entities.RepaymentSchedules.RepaymentSchedule", "RepaymentSchedule")
                        .WithMany("PenaltyTransactions")
                        .HasForeignKey("RepaymentScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_penalty_transaction_repayment_schedules_repayment_schedule_id");

                    b.Navigation("LoanApplication");

                    b.Navigation("RepaymentSchedule");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.RepaymentSchedules.RepaymentSchedule", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.LoanApplications.LoanApplication", "LoanApplication")
                        .WithMany("RepaymentSchedules")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repayment_schedules_loan_applications_loan_application_id");

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.RepaymentTransactions.RepaymentTransaction", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.LoanApplications.LoanApplication", "LoanApplication")
                        .WithMany("RepaymentTransactions")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repayment_transaction_loan_applications_loan_application_id");

                    b.HasOne("CSMF.WebMvc.Domain.Entities.RepaymentSchedules.RepaymentSchedule", "RepaymentSchedule")
                        .WithMany("RepaymentTransactions")
                        .HasForeignKey("RepaymentScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repayment_transaction_repayment_schedules_repayment_schedule");

                    b.Navigation("LoanApplication");

                    b.Navigation("RepaymentSchedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.Users.SystemUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("SystemUserId")
                        .HasConstraintName("fk_asp_net_roles_asp_net_users_system_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.Users.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.Users.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("CSMF.WebMvc.Domain.Entities.Users.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CSMF.WebMvc.Domain.Entities.Users.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Branches.Branch", b =>
                {
                    b.Navigation("BranchUsers");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.LoanApplications.LoanApplication", b =>
                {
                    b.Navigation("LoanFees");

                    b.Navigation("PenaltyTransactions");

                    b.Navigation("RepaymentSchedules");

                    b.Navigation("RepaymentTransactions");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.LoanProducts.LoanProduct", b =>
                {
                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.RepaymentSchedules.RepaymentSchedule", b =>
                {
                    b.Navigation("PenaltyTransactions");

                    b.Navigation("RepaymentTransactions");
                });

            modelBuilder.Entity("CSMF.WebMvc.Domain.Entities.Users.SystemUser", b =>
                {
                    b.Navigation("BranchUsers");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
